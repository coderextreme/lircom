/*
 * ClientConnect.java
 *
 * Created on February 13, 2005, 3:11 PM
 */

package lircom {
/**
 *
 * @author  carlsonj
 */
public class ClientConnect extends javax.swing.JFrame {
    
    /** Creates new form ClientConnect */
    public function ClientConnect(mainwin:MainWindow) {
        this.mainwin = mainwin;
	setTitle("Form a connection");
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private function initComponents():void {

        jPanel1 = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        harvestButton = new javax.swing.JButton();
        url = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        remoteSites = new javax.swing.JTable();

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public function actionPerformed(evt:java.awt.event.ActionEvent):void {
                connectButtonActionPerformed(evt);
            }
        });
        jPanel1.add(connectButton);

        harvestButton.setText("Harvest");
        harvestButton.addActionListener(new java.awt.event.ActionListener() {
            public function actionPerformed(evt:java.awt.event.ActionEvent):void {
                harvestButtonActionPerformed(evt);
            }
        });
        jPanel1.add(harvestButton);

        url.setText("http://coderextreme.net/advertise.php");
        url.addActionListener(new java.awt.event.ActionListener() {
            public function actionPerformed(evt:java.awt.event.ActionEvent):void {
                urlActionPerformed(evt);
            }
        });
        jPanel1.add(url);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        remoteSites.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nickname", "Remote Server", "Remote Port", "Registration Date", "Connect?", "Connected?"
            }
        ) {
            var types:Array= new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public function getColumnClass(columnIndex:int):Class {
                return types [columnIndex];
            }
        });
        remoteSites.setSurrendersFocusOnKeystroke(true);
        jScrollPane1.setViewportView(remoteSites);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
     var NICK_COL:int= 0;
     var HOST_COL:int= 1;
     var PORT_COL:int= 2;
     var DATE_COL:int= 3;
     var CONNECT_COL:int= 4;
     var CONNECTED_COL:int= 5;
     private function harvestButtonActionPerformed(evt:java.awt.event.ActionEvent):void {//GEN-FIRST:event_harvestButtonActionPerformed
         try {
               var adurl:String= url.getText();
               var u:java.net.URL= new java.net.URL(adurl);
               var conn:java.net.URLConnection= u.openConnection();
               conn.setDoInput(true);
               conn.connect();
               var br:java.io.BufferedReader=
                       new java.io.BufferedReader(
                       new java.io.InputStreamReader(
                       conn.getInputStream()));
               var line:String;
               while ((line = br.readLine()) != null) {
                   System.err.println("Read "+line);
                   var st:java.util.StringTokenizer= new java.util.StringTokenizer(line, "|");
                   var host:String= st.nextToken();
                   var port:String= st.nextToken();
                   var nick:String= st.nextToken();
                   var date:String= st.nextToken();
                   new PossibleConnection(host, port, nick, date);
               }
         } catch (var e:Exception) {
             System.err.println("Problems harvesting servers.");
         }
        var i:java.util.Iterator= PossibleConnection.iterator();
        var row:int= 0;
        var tm:javax.swing.table.DefaultTableModel= javax.swing.table.DefaultTableModel(remoteSites.getModel());
        while (tm.getRowCount() > 0) {
                tm.removeRow(0);
        }
        while (i.hasNext()) {
                System.err.println("got here");
                var pcon:PossibleConnection= PossibleConnection(PossibleConnection.get(i.next()));
                try {
                    Integer.parseInt(pcon.port);
                    Object rowobj [] = new Object [] {
                            pcon.nick,
                            pcon.host,
                            new Integer(pcon.port),
                            pcon.date,
                            new Boolean(!pcon.connected),
                            new Boolean(pcon.connected)
                    };
                    tm.addRow(rowobj);
                } catch (var e:Exception) {
                    System.err.println("Bad port "+pcon.port+" on row "+(row+1));
                }
                row++;
        }
	/*
        Object rowobj2 [] = new Object [] {
                            "Guest",
                            "localhost",
                            new Integer(8180),
                            "",
                            new Boolean(false),
                            new Boolean(false)
       };
       tm.addRow(rowobj2);
       */
     }//GEN-LAST:event_harvestButtonActionPerformed

    private function connectButtonActionPerformed(evt:java.awt.event.ActionEvent):void {//GEN-FIRST:event_connectButtonActionPerformed
   
        var tm:javax.swing.table.TableModel= remoteSites.getModel();
	var found:Boolean= false;
        for (var row:int= 0; row < tm.getRowCount(); row++) {
            //System.err.println(row);
            var obj:Object= tm.getValueAt(row, CONNECT_COL);
            var host:String= String(tm.getValueAt(row, HOST_COL));
            var port:String= tm.getValueAt(row, PORT_COL).toString();
            var nick:String= String(tm.getValueAt(row, NICK_COL));
            var pcon:PossibleConnection= PossibleConnection(PossibleConnection.get(host, port, nick));
            if (obj != null && (Boolean(obj)).booleanValue()) {
                    try {
                        if (!pcon.connected) {
                            mainwin.connect(host, Integer.parseInt(port));
                            pcon.connected = true;  
		            found = true;
                        }
                    } catch (var e:Exception) {
                            pcon.connected = false;
                    }
                    tm.setValueAt(new Boolean(pcon.connected), row, CONNECTED_COL);
                    tm.setValueAt(new Boolean(false), row, CONNECT_COL);
            }
        }
	if (found) {
		setVisible(false);
	}
    }//GEN-LAST:event_connectButtonActionPerformed

    private function urlActionPerformed(evt:java.awt.event.ActionEvent):void {//GEN-FIRST:event_urlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static function main(String args[]):void {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public function run():void {
                new ClientConnect(null).setVisible(true);
            }
        });
    }
    public function harvest():void {
        harvestButtonActionPerformed(null);
	connectButton.invalidate();
	connectButton.validate();
	harvestButton.invalidate();
	harvestButton.validate();
    }
    private var mainwin:MainWindow;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var connectButton:javax.swing.JButton;
    private var harvestButton:javax.swing.JButton;
    private var jPanel1:javax.swing.JPanel;
    private var jScrollPane1:javax.swing.JScrollPane;
    private var remoteSites:javax.swing.JTable;
    private var url:javax.swing.JTextField;
    // End of variables declaration//GEN-END:variables
    
}
}