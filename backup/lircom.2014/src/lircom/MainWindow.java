/*
 * Alfav02.java
 *
 * Created on February 12, 2005, 11:59 PM
 */

package lircom;
import javax.swing.UIManager;

/**
 *
 * @author  hivechild
 */
public class MainWindow extends javax.swing.JFrame implements java.awt.event.WindowListener {
    
    /** Creates new form Alfav02 */
    public MainWindow(String title) throws Exception {
        super(title);
        initComponents();
        // Main_Menu.getPopupMenu().setLightWeightPopupEnabled(false);
        scrollingText.getViewport().setOpaque(false);
	//Orbit2 canvas = new Orbit2();
        //jLayeredPane2.add(canvas, javax.swing.JLayeredPane.PALETTE_LAYER);
	addWindowListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLayeredPane2 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        scrollingText = new javax.swing.JScrollPane();
        chat_Info_Area = new javax.swing.JEditorPane();
        member_List = new javax.swing.JList();
        chat_Text_Field = new javax.swing.JTextField();
        backgroundImage = new javax.swing.JLabel();
        main_Menu_Bar = new javax.swing.JMenuBar();
        Main_Menu = new javax.swing.JMenu();
        Menu_Options = new javax.swing.JMenuItem();
        selectBackgroundImage = new javax.swing.JMenuItem();
        selectDefaultTextColor = new javax.swing.JMenuItem();
        selectConnections = new javax.swing.JMenuItem();
        selectAdvertiseService = new javax.swing.JMenuItem();
        setBrowser = new javax.swing.JMenuItem();
        addChannel = new javax.swing.JMenuItem();
        followHyperlinks = new javax.swing.JCheckBoxMenuItem();
        solitaireMenu = new javax.swing.JMenu();
        watchSolitaire = new javax.swing.JMenuItem();
        dealSolitaire = new javax.swing.JMenuItem();
        randomPlayer = new javax.swing.JMenuItem();
        methodicalPlayer = new javax.swing.JMenuItem();
        flushContacts = new javax.swing.JMenuItem();
        flashchat = new javax.swing.JMenuItem();
        languageMenu = new javax.swing.JMenu();
        zh = new javax.swing.JMenuItem();
        zt = new javax.swing.JMenuItem();
        nl = new javax.swing.JMenuItem();
        en = new javax.swing.JMenuItem();
        fr = new javax.swing.JMenuItem();
        de = new javax.swing.JMenuItem();
        el = new javax.swing.JMenuItem();
        it = new javax.swing.JMenuItem();
        ja = new javax.swing.JMenuItem();
        ko = new javax.swing.JMenuItem();
        pt = new javax.swing.JMenuItem();
        ru = new javax.swing.JMenuItem();
        es = new javax.swing.JMenuItem();
        soundToggleItem = new javax.swing.JCheckBoxMenuItem();
        warmChicken = new javax.swing.JMenuItem();
        quit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LirCom");
        setName("Lircom"); // NOI18N

        jPanel1.setDoubleBuffered(false);
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 445));
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 445));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        scrollingText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollingText.setAlignmentY(1.0F);
        scrollingText.setAutoscrolls(true);
        scrollingText.setMinimumSize(new java.awt.Dimension(700, 420));
        scrollingText.setOpaque(false);
        scrollingText.setPreferredSize(new java.awt.Dimension(719, 420));

        chat_Info_Area.setContentType("text/html");
        chat_Info_Area.setToolTipText("chat history window");
        chat_Info_Area.setOpaque(false);
        chat_Info_Area.setPreferredSize(new java.awt.Dimension(700, 450));
        scrollingText.setViewportView(chat_Info_Area);

        jPanel1.add(scrollingText, new java.awt.GridBagConstraints());

        member_List.setBackground(new java.awt.Color(0, 0, 0));
        member_List.setForeground(new java.awt.Color(255, 255, 204));
        member_List.setToolTipText("Chatter List");
        member_List.setMinimumSize(new java.awt.Dimension(100, 420));
        member_List.setNextFocusableComponent(chat_Text_Field);
        member_List.setOpaque(false);
        member_List.setPreferredSize(new java.awt.Dimension(100, 420));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        jPanel1.add(member_List, gridBagConstraints);

        chat_Text_Field.setBackground(new java.awt.Color(0, 0, 0));
        chat_Text_Field.setForeground(new java.awt.Color(204, 255, 204));
        chat_Text_Field.setText("type here");
        chat_Text_Field.setCaretColor(new java.awt.Color(255, 255, 255));
        chat_Text_Field.setMinimumSize(new java.awt.Dimension(800, 25));
        chat_Text_Field.setNextFocusableComponent(member_List);
        chat_Text_Field.setPreferredSize(new java.awt.Dimension(800, 25));
        chat_Text_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chat_Text_FieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        jPanel1.add(chat_Text_Field, gridBagConstraints);

        jPanel1.setBounds(0, 0, 800, 445);
        jLayeredPane2.add(jPanel1, javax.swing.JLayeredPane.DRAG_LAYER);

        backgroundImage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lircom/Space_Tears_II.jpg"))); // NOI18N
        backgroundImage.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        backgroundImage.setAlignmentY(1.0F);
        backgroundImage.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/lircom/Space_Tears_II.jpg"))); // NOI18N
        backgroundImage.setOpaque(true);
        backgroundImage.setBounds(0, 0, 800, 455);
        jLayeredPane2.add(backgroundImage, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(jLayeredPane2, java.awt.BorderLayout.CENTER);

        Main_Menu.setText("Menu");
        Main_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main_MenuActionPerformed(evt);
            }
        });

        Menu_Options.setText("Options");
        Main_Menu.add(Menu_Options);

        selectBackgroundImage.setText("Select Background Image");
        selectBackgroundImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupFileDialog(evt);
            }
        });
        Main_Menu.add(selectBackgroundImage);

        selectDefaultTextColor.setText("Select Text Color");
        selectDefaultTextColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDefaultTextColorActionPerformed(evt);
            }
        });
        Main_Menu.add(selectDefaultTextColor);

        selectConnections.setText("Connections");
        selectConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectConnectionsActionPerformed(evt);
            }
        });
        Main_Menu.add(selectConnections);

        selectAdvertiseService.setText("Advertise Service");
        selectAdvertiseService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAdvertiseServiceActionPerformed(evt);
            }
        });
        Main_Menu.add(selectAdvertiseService);

        setBrowser.setText("Set Web Browser");
        setBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBrowserActionPerformed(evt);
            }
        });
        Main_Menu.add(setBrowser);

        addChannel.setText("Add Channel");
        addChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChannelActionPerformed(evt);
            }
        });
        Main_Menu.add(addChannel);

        followHyperlinks.setText("Follow Hyperlinks");
        followHyperlinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followHyperlinksActionPerformed(evt);
            }
        });
        Main_Menu.add(followHyperlinks);

        solitaireMenu.setText("Solitaire");
        solitaireMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solitaireMenuActionPerformed(evt);
            }
        });

        watchSolitaire.setText("Watch");
        watchSolitaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchSolitaireActionPerformed(evt);
            }
        });
        solitaireMenu.add(watchSolitaire);

        dealSolitaire.setText("Deal");
        dealSolitaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealSolitaireActionPerformed(evt);
            }
        });
        solitaireMenu.add(dealSolitaire);

        randomPlayer.setText("Computer Plays Randomly");
        randomPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomPlayerActionPerformed(evt);
            }
        });
        solitaireMenu.add(randomPlayer);

        methodicalPlayer.setText("Computer Plays Methodically");
        methodicalPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodicalPlayerActionPerformed(evt);
            }
        });
        solitaireMenu.add(methodicalPlayer);

        Main_Menu.add(solitaireMenu);

        flushContacts.setText("Flush Contacts");
        flushContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flushContactsActionPerformed(evt);
            }
        });
        Main_Menu.add(flushContacts);

        flashchat.setText("Flashchat");
        flashchat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flashchatActionPerformed(evt);
            }
        });
        Main_Menu.add(flashchat);

        languageMenu.setText("Language");

        zh.setText("中文");
        zh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zhActionPerformed(evt);
            }
        });
        languageMenu.add(zh);

        zt.setText("??");
        zt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ztActionPerformed(evt);
            }
        });
        languageMenu.add(zt);

        nl.setText("Nederlands");
        nl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nlActionPerformed(evt);
            }
        });
        languageMenu.add(nl);

        en.setText("English");
        en.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enActionPerformed(evt);
            }
        });
        languageMenu.add(en);

        fr.setText("Francais");
        fr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frActionPerformed(evt);
            }
        });
        languageMenu.add(fr);

        de.setText("Deutsch");
        de.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deActionPerformed(evt);
            }
        });
        languageMenu.add(de);

        el.setText("ελληνικά");
        el.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elActionPerformed(evt);
            }
        });
        languageMenu.add(el);

        it.setText("italiano");
        it.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itActionPerformed(evt);
            }
        });
        languageMenu.add(it);

        ja.setText("日本語");
        ja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaActionPerformed(evt);
            }
        });
        languageMenu.add(ja);

        ko.setText("한국어");
        ko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                koActionPerformed(evt);
            }
        });
        languageMenu.add(ko);

        pt.setText("Português");
        pt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ptActionPerformed(evt);
            }
        });
        languageMenu.add(pt);

        ru.setText("русский язык");
        ru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ruActionPerformed(evt);
            }
        });
        languageMenu.add(ru);

        es.setText("Español");
        es.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esActionPerformed(evt);
            }
        });
        languageMenu.add(es);

        Main_Menu.add(languageMenu);

        soundToggleItem.setText("Toggle Sound");
        soundToggleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundToggleItemActionPerformed(evt);
            }
        });
        Main_Menu.add(soundToggleItem);

        warmChicken.setLabel("Warm Chicken");
        warmChicken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmChickenActionPerformed(evt);
            }
        });
        Main_Menu.add(warmChicken);

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        Main_Menu.add(quit);

        main_Menu_Bar.add(Main_Menu);

        setJMenuBar(main_Menu_Bar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-500)/2, 800, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void warmChickenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmChickenActionPerformed
            try {
		heathens = new Heathens(chat, nickname);
	    } catch (Exception e) {
	    }
    }//GEN-LAST:event_warmChickenActionPerformed

    private void soundToggleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundToggleItemActionPerformed
        chat.toggleSound();
    }//GEN-LAST:event_soundToggleItemActionPerformed

    private void ztActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ztActionPerformed
        chat.setLanguage("zt");
    }//GEN-LAST:event_ztActionPerformed

    private void zhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zhActionPerformed
        chat.setLanguage("zh");
    }//GEN-LAST:event_zhActionPerformed

    private void esActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esActionPerformed
        chat.setLanguage("es");
    }//GEN-LAST:event_esActionPerformed

    private void ruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ruActionPerformed
        chat.setLanguage("ru");
    }//GEN-LAST:event_ruActionPerformed

    private void ptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ptActionPerformed
        chat.setLanguage("pt");
    }//GEN-LAST:event_ptActionPerformed

    private void koActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_koActionPerformed
        chat.setLanguage("ko");
    }//GEN-LAST:event_koActionPerformed

    private void jaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaActionPerformed
        chat.setLanguage("ja");
    }//GEN-LAST:event_jaActionPerformed

    private void itActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itActionPerformed
        chat.setLanguage("it");
    }//GEN-LAST:event_itActionPerformed

    private void elActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elActionPerformed
        chat.setLanguage("el");
    }//GEN-LAST:event_elActionPerformed

    private void frActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frActionPerformed
       chat.setLanguage("fr");
    }//GEN-LAST:event_frActionPerformed

    private void nlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nlActionPerformed
       chat.setLanguage("nl");
    }//GEN-LAST:event_nlActionPerformed

    private void deActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deActionPerformed
        chat.setLanguage("de");
    }//GEN-LAST:event_deActionPerformed

    private void enActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enActionPerformed
        chat.setLanguage("en");
    }//GEN-LAST:event_enActionPerformed

    private void flashchatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flashchatActionPerformed
	    try {
		Runestone r = new Runestone(chat, nickname);
	    } catch (Exception e) {
	    }
    }//GEN-LAST:event_flashchatActionPerformed

    private void flushContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flushContactsActionPerformed
        chat.flushContacts();
    }//GEN-LAST:event_flushContactsActionPerformed

    private void randomPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomPlayerActionPerformed
        try {
            startSolitaire("random");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_randomPlayerActionPerformed

    private void dealSolitaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealSolitaireActionPerformed
        try {
            startSolitaire("dealer");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_dealSolitaireActionPerformed

    private void methodicalPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodicalPlayerActionPerformed
        try {
            startSolitaire("methodical");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_methodicalPlayerActionPerformed

    private void solitaireMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solitaireMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_solitaireMenuActionPerformed

    private void Main_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Main_MenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Main_MenuActionPerformed

    private void watchSolitaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchSolitaireActionPerformed
        try {
            startSolitaire("display");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_watchSolitaireActionPerformed

    private void followHyperlinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followHyperlinksActionPerformed
        chat_Info_Area.setEditable(!chat_Info_Area.isEditable());
    }//GEN-LAST:event_followHyperlinksActionPerformed

    private void addChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChannelActionPerformed
        try {
 
		String classname = javax.swing.JOptionPane.showInputDialog(this, "Enter classname:", "lircom.Channel");
		MainWindow newChannel = new MainWindow(classname);
		newChannel.nickname = javax.swing.JOptionPane.showInputDialog(this, "Enter nickname:", "Guest");
		newChannel.setTitle(newChannel.nickname);
		newChannel.setChat(classname, newChannel.nickname);
		newChannel.setVisible(true);
		newChannel.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		// newChannel.bridge = new IRCBridge(newChannel.chat, newChannel.nickname);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_addChannelActionPerformed

    private void setBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBrowserActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        if (currentBrowserDirectory != null) {
          chooser.setCurrentDirectory(currentBrowserDirectory);
        }
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            browser = chooser.getSelectedFile().getAbsolutePath();
            hyperlinkHandler.setBrowser(browser);
            currentBrowserDirectory = chooser.getCurrentDirectory();
        }
    }//GEN-LAST:event_setBrowserActionPerformed

    private void selectAdvertiseServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAdvertiseServiceActionPerformed
        if (serverAdvertise == null) {
                serverAdvertise = new ServerAdvertise();
        }
        serverAdvertise.setChat(chat);
        serverAdvertise.setVisible(true);
        serverAdvertise.setTitle("serverAdvertise");
    }//GEN-LAST:event_selectAdvertiseServiceActionPerformed

    private void selectConnectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectConnectionsActionPerformed
        if (clientConnect == null) {
            clientConnect = new ClientConnect(this);
        }
        clientConnect.setVisible(true);
        clientConnect.harvest();
    }//GEN-LAST:event_selectConnectionsActionPerformed

    private void selectDefaultTextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDefaultTextColorActionPerformed
        // TODO add your handling code here:
        if (currentTextColor == null) {
               currentTextColor =  java.awt.Color.getColor("#FFFFFF");
        }
        if (currentTextColor == null) {
            currentTextColor = java.awt.Color.WHITE;
        }
        javax.swing.JColorChooser chooser = new javax.swing.JColorChooser(currentTextColor);
        currentTextColor = chooser.showDialog(this, "Select default text color", currentTextColor);
        String red = Integer.toHexString(currentTextColor.getRed());
        if (red.length() == 1) {
                red = "0"+red;
        }
        String green = Integer.toHexString(currentTextColor.getGreen());
        if (green.length() == 1) {
                green = "0"+green;
        }
        String blue = Integer.toHexString(currentTextColor.getBlue());
        if (blue.length() == 1) {
                blue = "0"+blue;
        }
        String color = "#"+red+green+blue;
        chat.setColor(color);
    }//GEN-LAST:event_selectDefaultTextColorActionPerformed

    private void chat_Text_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chat_Text_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chat_Text_FieldActionPerformed

    private void popupFileDialog(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupFileDialog
    javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
    if (currentDirectory != null) {
        chooser.setCurrentDirectory(currentDirectory);
    }
    // Note: source for ExampleFileFilter can be found in FileChooserDemo,
    // under the demo/jfc directory in the Java 2 SDK, Standard Edition.
    ExampleFileFilter filter = new ExampleFileFilter();
    filter.addExtension("jpg");
    filter.addExtension("gif");
    filter.setDescription("JPG & GIF Images");
    chooser.setFileFilter(filter);
    int returnVal = chooser.showOpenDialog(this);
    if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
        backgroundImage.setIcon(new javax.swing.ImageIcon(chooser.getSelectedFile().getAbsolutePath()));
        currentDirectory = chooser.getCurrentDirectory();
    }
    }//GEN-LAST:event_popupFileDialog

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed
    
    /**
     * @param args the command line arguments
     */
    static String[] args;
    public static void main(String chatargs[]) {
	try {
	  //UIManager.setLookAndFeel(
	    //UIManager.getCrossPlatformLookAndFeelClassName());
	} catch (Exception e) {
	}
	args = chatargs;
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
		try {
			MainWindow lircomwindow = new MainWindow("LirCom");
			String classname = "lircom.Chat";
			if (args.length > 0) {
				classname = args[0];
			} else {
				classname = javax.swing.JOptionPane.showInputDialog("Enter classname:", "lircom.Chat");
			}
			if (classname == null) {
				classname = "lircom.Chat";
			}
			lircomwindow.nickname = "Guest";
			if (args.length > 1) {
				lircomwindow.nickname = args[1];
			} else {
				lircomwindow.nickname = javax.swing.JOptionPane.showInputDialog("Enter nickname:");
			}
			if (lircomwindow.nickname == null) {
				System.exit(0);
			}
			lircomwindow.setTitle(lircomwindow.nickname);
			lircomwindow.setChat(classname, lircomwindow.nickname);
			String url = "irc://irc.ircstorm.net:6667/schizophrenia";
			if (args.length > 2) {
				url = args[2];
			} else {
				url = javax.swing.JOptionPane.showInputDialog("Enter url:", url);
			}
			if (url == null) {
				System.exit(0);
			}

                        // lircomwindow.setVisible(true);
                        // lircomwindow.selectConnectionsActionPerformed(null);
			lircomwindow.bridge = new IRCBridge(lircomwindow.chat, lircomwindow.nickname, url, lircomwindow);
    			// lircomwindow.warmChickenActionPerformed(null);
                        // lircomwindow.flashchatActionPerformed(null);
 
                } catch (Exception e) {
			System.err.println("Died");
			e.printStackTrace();
		}
                
            }
        });
    }
    public void setChat(String classname, String nickname) throws Exception {
		try {
			chat = (Chat)(Class.forName(classname).newInstance());
		} catch (Exception e) {
			chat = new Chat();
		}
		chat.setNick(nickname);
		init(chat);
    }
    public void connect(String server, int port) throws Exception {
		ClientOnServer client = new ClientOnServer(server, port);
		client.start();
    }
    public void init(Chat chat) throws Exception {
		FromGUI fg = new FromGUI();
		FromServer fs = new FromServer();
		chat.setInputStream(fg);
		chat.setOutputStream(fs);
		fs.setChat(chat);
                //chat.connect(remoteServer, remotePort); 
                System.err.println("Channel id is "+chat.clientno);
                
                chat.jp = member_List;
                chat.tf = chat_Text_Field;
                chat.ta = chat_Info_Area;
                chat.init();
                chat.start();
                hyperlinkHandler = new Hyperactive();
                chat_Info_Area.addHyperlinkListener(hyperlinkHandler);
    }
    public void startSolitaire(String mode) throws Exception {
            solitaire.Game g = new solitaire.Game();
//            try {
//                g.startGame(mode, heathens, nickname);
//                return;
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
            java.util.Iterator i = PossibleConnection.iterator();

            while (i.hasNext()) {
                PossibleConnection pcon = (PossibleConnection)
                    PossibleConnection.get(i.next());
                if (pcon.connected) {
                    try {
                        g.startGame(mode, pcon.host, Integer.parseInt(pcon.port), nickname);
                        return;
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        pcon.connected = false;
                    }
                }
 
            }
            selectConnectionsActionPerformed(null);      
    }
public void 	windowActivated(java.awt.event.WindowEvent e) {}
public void 	windowClosed(java.awt.event.WindowEvent e) {}
public void 	windowClosing(java.awt.event.WindowEvent e) { System.exit(0); }
public void 	windowDeactivated(java.awt.event.WindowEvent e) {}
public void 	windowDeiconified(java.awt.event.WindowEvent e) {}
public void 	windowIconified(java.awt.event.WindowEvent e) {}
public void 	windowOpened(java.awt.event.WindowEvent e) {}
    private String nickname;
    private Hyperactive hyperlinkHandler;
    private String browser;
    private java.io.File currentBrowserDirectory;
    private ServerAdvertise serverAdvertise;
    private ClientConnect clientConnect;
    private IRCBridge bridge;
    public Chat chat;
    private Heathens heathens;
    private java.awt.Color currentTextColor;
    private java.io.File currentDirectory;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Main_Menu;
    private javax.swing.JMenuItem Menu_Options;
    private javax.swing.JMenuItem addChannel;
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JEditorPane chat_Info_Area;
    private javax.swing.JTextField chat_Text_Field;
    private javax.swing.JMenuItem de;
    private javax.swing.JMenuItem dealSolitaire;
    private javax.swing.JMenuItem el;
    private javax.swing.JMenuItem en;
    private javax.swing.JMenuItem es;
    private javax.swing.JMenuItem flashchat;
    private javax.swing.JMenuItem flushContacts;
    private javax.swing.JCheckBoxMenuItem followHyperlinks;
    private javax.swing.JMenuItem fr;
    private javax.swing.JMenuItem it;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem ja;
    private javax.swing.JMenuItem ko;
    private javax.swing.JMenu languageMenu;
    private javax.swing.JMenuBar main_Menu_Bar;
    private javax.swing.JList member_List;
    private javax.swing.JMenuItem methodicalPlayer;
    private javax.swing.JMenuItem nl;
    private javax.swing.JMenuItem pt;
    private javax.swing.JMenuItem quit;
    private javax.swing.JMenuItem randomPlayer;
    private javax.swing.JMenuItem ru;
    private javax.swing.JScrollPane scrollingText;
    private javax.swing.JMenuItem selectAdvertiseService;
    private javax.swing.JMenuItem selectBackgroundImage;
    private javax.swing.JMenuItem selectConnections;
    private javax.swing.JMenuItem selectDefaultTextColor;
    private javax.swing.JMenuItem setBrowser;
    private javax.swing.JMenu solitaireMenu;
    private javax.swing.JCheckBoxMenuItem soundToggleItem;
    private javax.swing.JMenuItem warmChicken;
    private javax.swing.JMenuItem watchSolitaire;
    private javax.swing.JMenuItem zh;
    private javax.swing.JMenuItem zt;
    // End of variables declaration//GEN-END:variables
    
}
