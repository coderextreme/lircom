import javax.swing.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

public class Game extends MouseAdapter /*implements MouseMotionListener*/ {
	static Vector stacks = new Vector();
	static void init() {
		stacks.clear();
	}
	JWindow jf = new JWindow();
	ProgramsVersionSpace psvs;

	static public void main(String args[]) {
		Game g = new Game();
		Stack deck = g.deal();
		g.psvs = new ProgramsVersionSpace();

		g.jf.setSize(800,600);
		g.jf.getContentPane().setLayout(null);
		g.jf.getContentPane().add(deck.gui);
		g.jf.addMouseListener(g);
/*
		g.jf.addMouseMotionListener(g);
*/
		g.jf.setVisible(true);
	}
	static public Stack getStack(int i) {
		Iterator smi = stacks.iterator();
		while (smi.hasNext()) {
			Stack sm = (Stack)smi.next();
			if (sm != null && sm.stack_no == i) {
				return sm;
			}
		}
		return null;
	}
	public Stack deal() {
		Stack deck = new Stack(0, 0, 0, StackLayout.X, jf, this);
		Stack shuffledDeck = new Stack(0, 0, 0, StackLayout.X, jf, this);
		Random r = new Random();
		try {
		    // create deck
		    for (int v = CardItem.Ace; v < CardItem.King; v++) {
			for (int s = CardItem.Hearts; s < CardItem.Clubs; s++) {
			    CardItem d = Stack.cards[v-1][s];
			    d.setGame(this);
			    d.setFaceUp(false);
			    deck.add(d);
			}
		    }
		    // shuffle the cards
		    while (deck.size() > 0) {
			    int crd = r.nextInt(deck.size());
			    CardItem d = (CardItem)deck.elementAt(crd);
			    deck.remove(d);
			    shuffledDeck.insertElementAt(d, 0);
		    }
		} catch (Exception e) {
		    e.printStackTrace();
		}
		return shuffledDeck;
	}
	MouseEvent olde;
	public void 	mouseClicked(MouseEvent me) {
		try {
			if (olde == me) {
				return;
			}
		} finally {
			olde = me;
		}
		Component c = me.getComponent();
		if ((me.getModifiers() & InputEvent.BUTTON3_MASK) != 0) {
			// flip card
			if (c instanceof CardItem) {
				CardItem ci = (CardItem)c;
				ci.setFaceUp(!ci.getFaceUp());
			}
		} else if ((me.getModifiers() & InputEvent.BUTTON2_MASK) != 0) {
			if (c instanceof CardItem) {
				// flip entire stack over
				CardItem ci = (CardItem)c;
				Stack flippy = getStack(ci.stack);
				Stack picked = ci.getPicked();
				while (picked != flippy && flippy.size() > 0) {
					CardItem s = (CardItem)flippy.elementAt(0);
					flippy.remove(s);
			    		s.addPicked();
				        s.setFaceUp(!s.getFaceUp());
				}
				while (picked != null && picked != flippy && picked.size() > 0) {
					CardItem s = (CardItem)picked.elementAt(picked.size()-1);
			    		s.removePicked();
					flippy.add(s);
				}
				jf.getContentPane().invalidate();
				jf.getContentPane().validate();
				flippy.gui.invalidate();
				flippy.gui.validate();
				flippy.gui.repaint();
				jf.getContentPane().repaint();
			}
	        } else if (c instanceof CardItem) {
			CardItem ci = (CardItem)c;
			Stack picked = ci.getPicked();
			if (picked != null && picked.size() > 0) {
				// play the cards
				if (getStack(ci.stack) != null && picked != getStack(ci.stack)) {
					while (picked.size() > 0) {
						CardItem cipick = (CardItem)picked.elementAt(picked.size()-1);
						picked.remove(cipick);
						getStack(ci.stack).insertElementAt(cipick, 0);
					}
				}
			} else {
				// pick up the cards
				Stack s = getStack(ci.stack);
				int i = s.indexOf(ci);
/*
				while (i < s.size()) {
					CardItem cipick = (CardItem)s.elementAt(i);
					s.remove(cipick);
			    		cipick.addPicked();
				}
*/
				while (i >= 0) {
					CardItem cipick = (CardItem)s.elementAt(i);
					s.remove(cipick);
			    		cipick.addPicked();
					i--;
				}
			}
	        } else if (c instanceof StackBottom) {
			Stack bottom = (Stack)((StackBottom)c).stack;
			Stack picked = CardItem.getPicked();
			if (picked != null && bottom != picked && picked.size() > 0) {
				// play the cards
				while (picked.size() > 0) {
					CardItem cipick = (CardItem)picked.elementAt(picked.size()-1);
					picked.remove(cipick);
					bottom.insertElementAt(cipick, 0);
				}
			}
		} else {
			// create a whole new stack with the cards
			Stack nw = new Stack(me.getX(), me.getY(), 20, StackLayout.Y, jf, this);
			Stack picked = CardItem.getPicked();
			while (picked != null && nw != picked && picked.size() > 0) {
				CardItem cipick = (CardItem)picked.elementAt(picked.size()-1);
				picked.remove(cipick);
				nw.insertElementAt(cipick, 0);
			}
			jf.getContentPane().add(nw.gui);
		}
		jf.getContentPane().invalidate();
		jf.getContentPane().validate();
		jf.getContentPane().repaint();
	}
}
