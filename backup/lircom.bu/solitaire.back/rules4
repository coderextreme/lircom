/*
Stack 0 : initial
Stack 1 : talon
Stack 2 : waste
Stack 3-9 : working
Stack 10-13 : final

Talon is face down
Waste is face up
Final is face up
Working is face down cards with face up cards on top of them

Phase 1: Deal
All cards are in talon
*/
	position = 0;
	MutableInteger mi = new MutableInteger(0);
	playloop(0, 0, 1, false, mi);

	void playloop(int stack, int suit, int rank, boolean faceUp, MutableInteger mi) {
		CardItim cim = cards[rank-1][suit];
		cim.suit = suit;
		cim.rank = rank;
		cim.faceUp = faceUp;
		cim.stack = stack;
		cim.position = mi.getValue();
		mi.increment();
		if (suit < 3) {
			playloop(stack, suit+1, rank, faceUp, mi);
		}
		if (rank < 13) {
			playloop(stack, suit, rank+1, faceUp, mi);
		}
	}
			
/*
Shuffle talon
*/
	MutableInteger nc = new MutableInteger(0);
	shuffle(52, 0, 1);
	void shuffle(int size, int fromDeck, int toDeck) {
		if (size > 0) {
			int random = random.nextInt(size);
			CardItem cim = getStack(fromDeck).elementAt(random);
			getStack(fromDeck).remove(cim);
			getStack(toDeck).insertElementAt(cim, 0);
			shuffle(size-1, fromDeck, toDeck);
		}
	}
/*
Move 1 card from talon to stack 3
Move 2 cards from talon to stack 4
Move 3 cards from talon to stack 5
Move 4 cards from talon to stack 6
Move 5 cards from talon to stack 7
Move 6 cards from talon to stack 8
Move 7 cards from talon to stack 9
*/
	moveToStacks(1, 9);
	void moveToStacks(int fromDeck, int toDeck) {
		if (toDeck > 2) {
			moveCards(toDeck-2, fromDeck, toDeck);
			moveToStacks(fromDeck, toDeck-1);
		}
	}
	void moveCards(int numCards, int fromDeck, int toDeck) {
		if (numCards > 0) {
			CardItem cim = getStack(fromDeck).elementAt(0);
			getStack(fromDeck).remove(cim);
			getStack(toDeck).insertElementAt(cim, 0);
			moveCards(numCards-1, fromDeck, toDeck);
		}
	}
/*
Turn top card on stacks 3-9 face up
*/
	topCardFaceUp(9);
	void topCardFaceUp(int deck) {
		if (deck > 2) {
			getStack(deck).getTopCard().setFaceUp(true);
			topCardFaceUp(deck-1);
		}
	}


/*
Phase 2: Play

At anytime, while the game isn't finished you can:
*/
while (	getStack(10).size() < 13 &&
	getStack(11).size() < 13
	getStack(12).size() < 13
	getStack(13).size() < 13) {
/*
	Move the top card from talon to waste and turn face up
	(Alternatively, move top 3 cards from talon to the waste, or fewer if
		there aren't 3 cards in the talon)
*/
	CardItem cim = getStack(1).elementAt(0);
	getStack(1).remove(cim);
	getStack(2).insertElementAt(cim, 0);
	getStack(2).getTopCard().setFaceUp(true);
/*
	Move any face up top card to working stacks, if the card below the
		moved card is the face up top card and is opposite color and one
		greater than the card being moved.
*/
	int fromStack = random.nextInt(numStacks-1)+1; // do not include initial
	CardItem cim = getStack(fromStack).getTopCard();
	int toStack = random.nextInt(7)+3; // only the working stacks
	CardItem below = getStack(toStack).getTopCard();
	if (cim.faceUp && (below.suit + cim.suit) % 2 == 0 && below.rank - 1 == cim.rank) {
		getStack(fromStack).remove(cim);
		getStack(toStack).insertElementAt(cim, 0);
	}
/*
	Move a face up ace on top of a stack to final stack if the final stack
		is empty.
*/
	int stack = random.nextInt(numStacks-1)+1; // do not include initial
	CardItem cim = getStack(stack).getTopCard();
	if (cim.rank == 1 && cim.faceUp) {
		getStack(stack).remove(cim);
		if (getStack(10).isEmpty())  {
			getStack(10).insertElementAt(cim, 0);
		} else if (getStack(11).isEmpty())  {
			getStack(11).insertElementAt(cim, 0);
		} else if (getStack(12).isEmpty())  {
			getStack(12).insertElementAt(cim, 0);
		} else if (getStack(13).isEmpty())  {
			getStack(13).insertElementAt(cim, 0);
		}
	}
/*
	Move any face up card on top of a stack to final stack if final stack
		has a top card one less than the moved card, and the suits are
		the same.
	HIGH PRIORITY
*/
	int fromStack = random.nextInt(numStacks-1)+1; // do not include initial
	CardItem cim = getStack(fromStack).getTopCard();
	int toStack = random.nextInt(4)+10; // only include final stacks
	CardItem below = getStack(toStack).getTopCard();
	if (cim.faceUp && below.suit == cim.suit && below.rank + 1 == cim.rank) {
		getStack(fromStack).remove(cim);
		getStack(toStack).insertElementAt(cim, 0);
	}
/*
	Move a king from the waste or final to empty working stack if the king
		is the top card of waste or final.
*/
	int fromStack = random.nextInt(5);
	if (fromStack == 0) {
		fromStack = 2; // waste stack
	} else {
		fromStack += 9;  // final stacks
	}
	CardItem cim = getStack(fromStack).getTopCard();
	if (cim.rank == 13 && cim.faceUp) {
		if (getStack(3).isEmpty())  {
			getStack(3).insertElementAt(cim, 0);
		} else if (getStack(4).isEmpty())  {
			getStack(4).insertElementAt(cim, 0);
		} else if (getStack(5).isEmpty())  {
			getStack(5).insertElementAt(cim, 0);
		} else if (getStack(6).isEmpty())  {
			getStack(6).insertElementAt(cim, 0);
		} else if (getStack(7).isEmpty())  {
			getStack(7).insertElementAt(cim, 0);
		} else if (getStack(8).isEmpty())  {
			getStack(8).insertElementAt(cim, 0);
		} else if (getStack(9).isEmpty())  {
			getStack(9).insertElementAt(cim, 0);
		}
	}

/*
	Move a neighboring set of cards on a working stack including the top
		card, not including any face down card to another working stack
		if target stack has a face up top card one greater than the
		bottom moved card, and the suits are of opposite color.
*/
	int fromStack = random.nextInt(7)+3; // only the working stacks
	CardItem cim = getStack(fromStack).getRandomCard(); // bottom card
	int toStack = random.nextInt(7)+3; // only the working stacks
	CardItem below = getStack(toStack).getTopCard();
	if (cim.faceUp && (below.suit + cim.suit) % 2 == 0 && below.rank - 1 == cim.rank && below.faceUp) {
		moveNeighborCards(cim.position);
	}
	void moveNeighborCards(int pos, int fromStack, int toStack) {
		if (pos >= 0) {
			CardItem curr = getStack(fromStack).elementAt(pos);
			getStack(fromStack).remove(curr);
			getStack(toStack).insertElementAt(curr, 0);
			moveNeighborCards(pos-1, fromStack, toStack);
		}
	}
/*
	Move a neighboring set of cards on a working stack including the top
		card,a with the bottom card a face up king, not including any
		face down card to another working stack if target stack is
		empty.
*/
	int fromStack = random.nextInt(7)+3; // only the working stacks
	CardItem cim = getStack(fromStack).getRandomCard(); // bottom card
	int toStack = random.nextInt(7)+3; // only the working stacks
	CardItem below = getStack(toStack).getTopCard();
	if (cim.rank == 13 && cim.faceUp && (below.suit + cim.suit) % 2 == 0 && below.rank - 1 == cim.rank && below.faceUp) {
		if (getStack(3).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		} else if (getStack(4).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		} else if (getStack(5).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		} else if (getStack(6).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		} else if (getStack(7).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		} else if (getStack(8).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		} else if (getStack(9).isEmpty())  {
			moveNeighborCards(cim.position, fromStack, toStack);
		}
	}
/*
	Flip over the top card on a working stack, if it is face down.
*/
	int stack = random.nextInt(7)+3; // only the working stacks
	CardItem cim = getStack(stack).getTopCard();
	if (!cim.faceUp) {
		cim.setFaceUp(true);
	}

/*
	When the talon is exhausted turn waste over to form a new talon
*/
	if (getStack(1).isEmpty()) {
		flipOver();
	}
	void flipOver() {
		if (!getStack(2).isEmpty()) {
			// TODO may need work for card order
			CardItem cim = getStack(2).elementAt(0);
			getStack(2).remove(cim);
			cim.setFaceUp(false);
			getStack(1).insertElementAt(cim, 0);
			flipOver();
		}
	}
}
